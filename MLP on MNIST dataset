Multi-layer Perceptron
Build a 2-layer MLP for MNIST digit classfication. Feel free to play around with the model architecture and see how the training time/performance changes, but to begin, try the following:
Image (784 dimensions) -> fully connected layer (500 hidden units) -> nonlinearity (ReLU) -> fully connected layer (100 hidden units) -> nonlinearity (ReLU) -> fully connected (10 hidden units) -> softmax
In [ ]:


import tensorflow as tf 
from tqdm import trange 
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR) 
from tensorflow.examples.tutorials.mnist import input_data 
# Import data 
mnist = input_data.read_data_sets("/tmp/MNIST_data/", one_hot=True) 
​
# Create the model 
x = tf.placeholder(tf.float32, [None, 784]) 
stddev1 = 2 / np.sqrt(784 + 500) 
init1 = tf.truncated_normal((784, 500), stddev=stddev1) 
w1 = tf.Variable(init1)
b1=tf.Variable(tf.zeros([500])) 
y1=tf.nn.relu(tf.matmul(x,w1)+b1) 
stddev1 = 2 / np.sqrt(500 + 100) 
init1 = tf.truncated_normal((500, 100), stddev=stddev1) 
w2 = tf.Variable(init1)
b2=tf.Variable(tf.zeros([100])) 
y2=tf.nn.relu(tf.matmul(y1,w2)+b2) 
w_out=tf.Variable(tf.zeros([100,10])) 
b_out=tf.Variable(tf.zeros([10])) 
y=tf.matmul(y2,w_out)+b_out 
​
# Define loss and optimizer 
y_ = tf.placeholder(tf.float32, [None, 10]) 
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_, logits=y)) 
train_step = tf.train.AdamOptimizer(0.005).minimize(cross_entropy) 
​
# Create a Session object, initialize all variables 
sess = tf.Session() 
sess.run(tf.global_variables_initializer()) 
​
# Train 
total_batch = int(mnist.train.num_examples/550) 
for _ in trange(total_batch): 
   batch_xs, batch_ys = mnist.train.next_batch(100) 
   sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys}) 
​
# Test trained model 
correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1)) 
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) 
print('Test accuracy: {0}'.format(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))) 
​
sess.close() 
​
